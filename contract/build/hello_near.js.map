{"version":3,"file":"hello_near.js","sources":["../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/@scure/base/lib/esm/index.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/collections/unordered-set.js","../src/contract.ts"],"sourcesContent":["// make PromiseIndex a nominal typing\nvar PromiseIndexBrand;\n(function (PromiseIndexBrand) {\n    PromiseIndexBrand[PromiseIndexBrand[\"_\"] = -1] = \"_\";\n})(PromiseIndexBrand || (PromiseIndexBrand = {}));\nconst TYPE_KEY = \"typeInfo\";\nvar TypeBrand;\n(function (TypeBrand) {\n    TypeBrand[\"BIGINT\"] = \"bigint\";\n    TypeBrand[\"DATE\"] = \"date\";\n})(TypeBrand || (TypeBrand = {}));\nexport const ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport const ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ACCOUNT_ID_REGEX = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\nexport function u8ArrayToBytes(array) {\n    return array.reduce((result, value) => `${result}${String.fromCharCode(value)}`, \"\");\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    return Uint8Array.from([...bytes].map((byte) => byte.charCodeAt(0)));\n}\n/**\n * Accepts a string or Uint8Array and either checks for the validity of the string or converts the Uint8Array to Bytes.\n *\n * @param stringOrU8Array - The string or Uint8Array to be checked/transformed\n * @returns Safe Bytes to be used in NEAR calls.\n */\nexport function bytes(stringOrU8Array) {\n    if (typeof stringOrU8Array === \"string\") {\n        return checkStringIsBytes(stringOrU8Array);\n    }\n    if (stringOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(stringOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(value) {\n    [...value].forEach((character, index) => {\n        assert(character.charCodeAt(0) <= 255, `string ${value} at index ${index}: ${character} is not a valid byte`);\n    });\n    return value;\n}\n/**\n * Asserts that the expression passed to the function is truthy, otherwise throws a new Error with the provided message.\n *\n * @param expression - The expression to be asserted.\n * @param message - The error message to be printed.\n */\nexport function assert(expression, message) {\n    if (!expression) {\n        throw new Error(\"assertion failed: \" + message);\n    }\n}\nexport function getValueWithOptions(value, options = {\n    deserializer: deserialize,\n}) {\n    const deserialized = deserialize(value);\n    if (deserialized === undefined || deserialized === null) {\n        return options?.defaultValue ?? null;\n    }\n    if (options?.reconstructor) {\n        return options.reconstructor(deserialized);\n    }\n    return deserialized;\n}\nexport function serializeValueWithOptions(value, { serializer } = {\n    serializer: serialize,\n}) {\n    return serializer(value);\n}\nexport function serialize(valueToSerialize) {\n    return JSON.stringify(valueToSerialize, function (key, value) {\n        if (typeof value === \"bigint\") {\n            return {\n                value: value.toString(),\n                [TYPE_KEY]: TypeBrand.BIGINT,\n            };\n        }\n        if (typeof this[key] === \"object\" &&\n            this[key] !== null &&\n            this[key] instanceof Date) {\n            return {\n                value: this[key].toISOString(),\n                [TYPE_KEY]: TypeBrand.DATE,\n            };\n        }\n        return value;\n    });\n}\nexport function deserialize(valueToDeserialize) {\n    return JSON.parse(valueToDeserialize, (_, value) => {\n        if (value !== null &&\n            typeof value === \"object\" &&\n            Object.keys(value).length === 2 &&\n            Object.keys(value).every((key) => [\"value\", TYPE_KEY].includes(key))) {\n            switch (value[TYPE_KEY]) {\n                case TypeBrand.BIGINT:\n                    return BigInt(value[\"value\"]);\n                case TypeBrand.DATE:\n                    return new Date(value[\"value\"]);\n            }\n        }\n        return value;\n    });\n}\n/**\n * Validates the Account ID according to the NEAR protocol\n * [Account ID rules](https://nomicon.io/DataStructures/Account#account-id-rules).\n *\n * @param accountId - The Account ID string you want to validate.\n */\nexport function validateAccountId(accountId) {\n    return (accountId.length >= 2 &&\n        accountId.length <= 64 &&\n        ACCOUNT_ID_REGEX.test(accountId));\n}\n","/**\n * A Promise result in near can be one of:\n * - NotReady = 0 - the promise you are specifying is still not ready, not yet failed nor successful.\n * - Successful = 1 - the promise has been successfully executed and you can retrieve the resulting value.\n * - Failed = 2 - the promise execution has failed.\n */\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\n/**\n * A promise error can either be due to the promise failing or not yet being ready.\n */\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexport const utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString;\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n","import { bytes } from \"../utils\";\nimport { base58 } from \"@scure/base\";\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nvar DataLength;\n(function (DataLength) {\n    DataLength[DataLength[\"ED25519\"] = 32] = \"ED25519\";\n    DataLength[DataLength[\"SECP256K1\"] = 64] = \"SECP256K1\";\n})(DataLength || (DataLength = {}));\nfunction getCurveType(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return curveType;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction dataLength(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return {\n                [CurveType.ED25519]: DataLength.ED25519,\n                [CurveType.SECP256K1]: DataLength.SECP256K1,\n            }[curveType];\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction splitKeyTypeData(value) {\n    const idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [\n            curveTypeFromStr(value.substring(0, idx)),\n            value.substring(idx + 1),\n        ];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length, expectedLength) {\n        super(`Invalid length: ${length}. Expected: ${expectedLength}`);\n        this.length = length;\n        this.expectedLength = expectedLength;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\n/**\n * A abstraction on top of the NEAR public key string.\n */\nexport class PublicKey {\n    /**\n     * @param data - The string you want to create a PublicKey from.\n     */\n    constructor(data) {\n        const curveLenght = dataLength(data.charCodeAt(0));\n        if (data.length !== curveLenght + 1) {\n            throw new InvalidLengthError(data.length, curveLenght + 1);\n        }\n        this.type = getCurveType(data.charCodeAt(0));\n        this.data = data;\n    }\n    /**\n     * The curve type of the public key.\n     */\n    curveType() {\n        return this.type;\n    }\n    /**\n     * Create a public key from a public key string.\n     *\n     * @param publicKeyString - The public key string you want to create a PublicKey from.\n     */\n    static fromString(publicKeyString) {\n        const [curve, keyData] = splitKeyTypeData(publicKeyString);\n        let data;\n        try {\n            data = bytes(base58.decode(keyData));\n        }\n        catch (error) {\n            throw new Base58Error(error.message);\n        }\n        return new PublicKey(`${String.fromCharCode(curve)}${data}`);\n    }\n}\n","import { assert } from \"./utils\";\nimport { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\n/**\n * Logs parameters in the NEAR WASM virtual machine.\n *\n * @param params - Parameters to log.\n */\nexport function log(...params) {\n    env.log(params.reduce((accumulated, parameter, index) => {\n        // Stringify undefined\n        const param = parameter === undefined ? \"undefined\" : parameter;\n        // Convert Objects to strings and convert to string\n        const stringified = typeof param === \"object\" ? JSON.stringify(param) : `${param}`;\n        if (index === 0) {\n            return stringified;\n        }\n        return `${accumulated} ${stringified}`;\n    }, \"\"));\n}\n/**\n * Returns the account ID of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the public key of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the account that called the function.\n * Can only be called in a call or initialize function.\n */\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the current contract - the contract that is being executed.\n */\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the current block index.\n */\nexport function blockIndex() {\n    return env.block_index();\n}\n/**\n * Returns the current block height.\n */\nexport function blockHeight() {\n    return blockIndex();\n}\n/**\n * Returns the current block timestamp.\n */\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\n/**\n * Returns the current epoch height.\n */\nexport function epochHeight() {\n    return env.epoch_height();\n}\n/**\n * Returns the amount of NEAR attached to this function call.\n * Can only be called in payable functions.\n */\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\n/**\n * Returns the amount of Gas that was attached to this function call.\n */\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\n/**\n * Returns the amount of Gas that has been used by this function call until now.\n */\nexport function usedGas() {\n    return env.used_gas();\n}\n/**\n * Returns the current account's account balance.\n */\nexport function accountBalance() {\n    return env.account_balance();\n}\n/**\n * Returns the current account's locked balance.\n */\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\n/**\n * Reads the value from NEAR storage that is stored under the provided key.\n *\n * @param key - The key to read from storage.\n */\nexport function storageRead(key) {\n    const returnValue = env.storage_read(key, 0);\n    if (returnValue !== 1n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n/**\n * Checks for the existance of a value under the provided key in NEAR storage.\n *\n * @param key - The key to check for in storage.\n */\nexport function storageHasKey(key) {\n    return env.storage_has_key(key) === 1n;\n}\n/**\n * Get the last written or removed value from NEAR storage.\n */\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\n/**\n * Returns the current accounts NEAR storage usage.\n */\nexport function storageUsage() {\n    return env.storage_usage();\n}\n/**\n * Writes the provided bytes to NEAR storage under the provided key.\n *\n * @param key - The key under which to store the value.\n * @param value - The value to store.\n */\nexport function storageWrite(key, value) {\n    return env.storage_write(key, value, EVICTED_REGISTER) === 1n;\n}\n/**\n * Removes the value of the provided key from NEAR storage.\n *\n * @param key - The key to be removed.\n */\nexport function storageRemove(key) {\n    return env.storage_remove(key, EVICTED_REGISTER) === 1n;\n}\n/**\n * Returns the cost of storing 0 Byte on NEAR storage.\n */\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n/**\n * Returns the arguments passed to the current smart contract call.\n */\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\n/**\n * Returns the value from the NEAR WASM virtual machine.\n *\n * @param value - The value to return.\n */\nexport function valueReturn(value) {\n    env.value_return(value);\n}\n/**\n * Returns a random string of bytes.\n */\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\n/**\n * Join an arbitrary array of NEAR promises.\n *\n * @param promiseIndexes - An arbitrary array of NEAR promise indexes to join.\n */\nexport function promiseAnd(...promiseIndexes) {\n    return env.promise_and(...promiseIndexes);\n}\n/**\n * Create a NEAR promise which will have multiple promise actions inside.\n *\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\n/**\n * Attach a callback NEAR promise to a batch of NEAR promise actions.\n *\n * @param promiseIndex - The NEAR promise index of the batch.\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\n/**\n * Attach a create account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a create account action to.\n */\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\n/**\n * Attach a deploy contract promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a deploy contract action to.\n * @param code - The WASM byte code of the contract to be deployed.\n */\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\n/**\n * Attach a transfer promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a transfer action to.\n * @param amount - The amount of NEAR to transfer.\n */\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\n/**\n * Attach a stake promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a stake action to.\n * @param amount - The amount of NEAR to stake.\n * @param publicKey - The public key with which to stake.\n */\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\n/**\n * Attach a add full access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add full access key action to.\n * @param publicKey - The public key to add as a full access key.\n * @param nonce - The nonce to use.\n */\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\n/**\n * Attach a add access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add access key action to.\n * @param publicKey - The public key to add.\n * @param nonce - The nonce to use.\n * @param allowance - The allowance of the access key.\n * @param receiverId - The account ID of the receiver.\n * @param methodNames - The names of the method to allow the key for.\n */\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\n/**\n * Attach a delete key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete key action to.\n * @param publicKey - The public key to delete.\n */\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\n/**\n * Attach a delete account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete account action to.\n * @param beneficiaryId - The account ID of the beneficiary - the account that receives the remaining amount of NEAR.\n */\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\n/**\n * The number of promise results available.\n */\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index.\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResult(promiseIndex) {\n    const status = env.promise_result(promiseIndex, 0);\n    assert(Number(status) === PromiseResult.Successful, `Promise result ${status == PromiseResult.Failed\n        ? \"Failed\"\n        : status == PromiseResult.NotReady\n            ? \"NotReady\"\n            : status}`);\n    return env.read_register(0);\n}\n/**\n * Executes the promise in the NEAR WASM virtual machine.\n *\n * @param promiseIndex - The index of the promise to execute.\n */\nexport function promiseReturn(promiseIndex) {\n    env.promise_return(promiseIndex);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    const returnValue = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (returnValue === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    return env.alt_bn128_pairing_check(value) === 1n;\n}\n","import * as near from \"./api\";\nimport { deserialize, serialize } from \"./utils\";\n/**\n * Tells the SDK to use this function as the initialization function of the contract.\n *\n * @param _empty - An empty object.\n */\nexport function initialize(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\n/**\n * Tells the SDK to expose this function as a view function.\n *\n * @param _empty - An empty object.\n */\nexport function view(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\nexport function call({ privateFunction = false, payableFunction = false, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            if (privateFunction &&\n                near.predecessorAccountId() !== near.currentAccountId()) {\n                throw new Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > 0n) {\n                throw new Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\n/**\n * Tells the SDK to apply an array of passed in middleware to the function execution.\n *\n * @param middlewares - The middlewares to be executed.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function middleware(...middlewares) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            try {\n                middlewares.forEach((middleware) => middleware(...args));\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function NearBindgen({ requireInit = false, serializer = serialize, deserializer = deserialize, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageRead(\"STATE\");\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(objectToSave) {\n                near.storageWrite(\"STATE\", this._serialize(objectToSave));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value, forReturn = false) {\n                if (forReturn) {\n                    return JSON.stringify(value, (_, value) => typeof value === \"bigint\" ? `${value}` : value);\n                }\n                return serializer(value);\n            }\n            static _deserialize(value) {\n                return deserializer(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    const reconstructor = classObject[item].constructor?.reconstruct;\n                    classObject[item] = reconstructor\n                        ? reconstructor(plainObject[item])\n                        : plainObject[item];\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import * as near from \"../api\";\nimport { getValueWithOptions, serializeValueWithOptions, } from \"../utils\";\n/**\n * A lookup map that stores data in NEAR storage.\n */\nexport class LookupMap {\n    /**\n     * @param keyPrefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    /**\n     * Checks whether the collection contains the value.\n     *\n     * @param key - The value for which to check the presence.\n     */\n    containsKey(key) {\n        const storageKey = this.keyPrefix + key;\n        return near.storageHasKey(storageKey);\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const storageKey = this.keyPrefix + key;\n        const value = near.storageRead(storageKey);\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const storageKey = this.keyPrefix + key;\n        if (!near.storageRemove(storageKey)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param newValue - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, newValue, options) {\n        const storageKey = this.keyPrefix + key;\n        const storageValue = serializeValueWithOptions(newValue, options);\n        if (!near.storageWrite(storageKey, storageValue)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     * @param options - Options for storing the data.\n     */\n    extend(keyValuePairs, options) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value, options);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","import * as near from \"../api\";\nimport { assert, getValueWithOptions, u8ArrayToBytes, serializeValueWithOptions, ERR_INCONSISTENT_STATE, ERR_INDEX_OUT_OF_BOUNDS, } from \"../utils\";\nfunction indexToKey(prefix, index) {\n    const data = new Uint32Array([index]);\n    const array = new Uint8Array(data.buffer);\n    const key = u8ArrayToBytes(array);\n    return prefix + key;\n}\n/**\n * An iterable implementation of vector that stores its content on the trie.\n * Uses the following map: index -> element\n */\nexport class Vector {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     * @param length - The initial length of the collection. By default 0.\n     */\n    constructor(prefix, length = 0) {\n        this.prefix = prefix;\n        this.length = length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.length === 0;\n    }\n    /**\n     * Get the data stored at the provided index.\n     *\n     * @param index - The index at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(index, options) {\n        if (index >= this.length) {\n            return options?.defaultValue ?? null;\n        }\n        const storageKey = indexToKey(this.prefix, index);\n        const value = near.storageRead(storageKey);\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes an element from the vector and returns it in serialized form.\n     * The removed element is replaced by the last element of the vector.\n     * Does not preserve ordering, but is `O(1)`.\n     *\n     * @param index - The index at which to remove the element.\n     * @param options - Options for retrieving and storing the data.\n     */\n    swapRemove(index, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        if (index + 1 === this.length) {\n            return this.pop(options);\n        }\n        const key = indexToKey(this.prefix, index);\n        const last = this.pop(options);\n        assert(near.storageWrite(key, serializeValueWithOptions(last, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Adds data to the collection.\n     *\n     * @param element - The data to store.\n     * @param options - Options for storing the data.\n     */\n    push(element, options) {\n        const key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWrite(key, serializeValueWithOptions(element, options));\n    }\n    /**\n     * Removes and retrieves the element with the highest index.\n     *\n     * @param options - Options for retrieving the data.\n     */\n    pop(options) {\n        if (this.isEmpty()) {\n            return options?.defaultValue ?? null;\n        }\n        const lastIndex = this.length - 1;\n        const lastKey = indexToKey(this.prefix, lastIndex);\n        this.length -= 1;\n        assert(near.storageRemove(lastKey), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Replaces the data stored at the provided index with the provided data and returns the previously stored data.\n     *\n     * @param index - The index at which to replace the data.\n     * @param element - The data to replace with.\n     * @param options - Options for retrieving and storing the data.\n     */\n    replace(index, element, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        const key = indexToKey(this.prefix, index);\n        assert(near.storageWrite(key, serializeValueWithOptions(element, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of elements.\n     *\n     * @param elements - The elements to extend the collection with.\n     */\n    extend(elements) {\n        for (const element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new VectorIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (let index = 0; index < this.length; index++) {\n            const key = indexToKey(this.prefix, index);\n            near.storageRemove(key);\n        }\n        this.length = 0;\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const vector = new Vector(data.prefix, data.length);\n        return vector;\n    }\n}\n/**\n * An iterator for the Vector collection.\n */\nexport class VectorIterator {\n    /**\n     * @param vector - The vector collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(vector, options) {\n        this.vector = vector;\n        this.options = options;\n        this.current = 0;\n    }\n    next() {\n        if (this.current >= this.vector.length) {\n            return { value: null, done: true };\n        }\n        const value = this.vector.get(this.current, this.options);\n        this.current += 1;\n        return { value, done: false };\n    }\n}\n","import { assert, ERR_INCONSISTENT_STATE, getValueWithOptions, serializeValueWithOptions, } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nimport { LookupMap } from \"./lookup-map\";\n/**\n * An unordered map that stores data in NEAR storage.\n */\nexport class UnorderedMap {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(prefix) {\n        this.prefix = prefix;\n        this.keys = new Vector(`${prefix}u`); // intentional different prefix with old UnorderedMap\n        this.values = new LookupMap(`${prefix}m`);\n    }\n    /**\n     * The number of elements stored in the collection.\n     */\n    get length() {\n        return this.keys.length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.keys.isEmpty();\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const valueAndIndex = this.values.get(key);\n        if (valueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value] = valueAndIndex;\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param value - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, value, options) {\n        const valueAndIndex = this.values.get(key);\n        const serialized = serializeValueWithOptions(value, options);\n        if (valueAndIndex === null) {\n            const newElementIndex = this.length;\n            this.keys.push(key);\n            this.values.set(key, [serialized, newElementIndex]);\n            return null;\n        }\n        const [oldValue, oldIndex] = valueAndIndex;\n        this.values.set(key, [serialized, oldIndex]);\n        return getValueWithOptions(oldValue, options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const oldValueAndIndex = this.values.remove(key);\n        if (oldValueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value, index] = oldValueAndIndex;\n        assert(this.keys.swapRemove(index) !== null, ERR_INCONSISTENT_STATE);\n        // the last key is swapped to key[index], the corresponding [value, index] need update\n        if (!this.keys.isEmpty() && index !== this.keys.length) {\n            // if there is still elements and it was not the last element\n            const swappedKey = this.keys.get(index);\n            const swappedValueAndIndex = this.values.get(swappedKey);\n            assert(swappedValueAndIndex !== null, ERR_INCONSISTENT_STATE);\n            this.values.set(swappedKey, [swappedValueAndIndex[0], index]);\n        }\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (const key of this.keys) {\n            // Set instead of remove to avoid loading the value from storage.\n            this.values.set(key, null);\n        }\n        this.keys.clear();\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new UnorderedMapIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     */\n    extend(keyValuePairs) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const map = new UnorderedMap(data.prefix);\n        // reconstruct keys Vector\n        map.keys = new Vector(`${data.prefix}u`);\n        map.keys.length = data.keys.length;\n        // reconstruct values LookupMap\n        map.values = new LookupMap(`${data.prefix}m`);\n        return map;\n    }\n}\n/**\n * An iterator for the UnorderedMap collection.\n */\nclass UnorderedMapIterator {\n    /**\n     * @param unorderedMap - The unordered map collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(unorderedMap, options) {\n        this.options = options;\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.map = unorderedMap.values;\n    }\n    next() {\n        const key = this.keys.next();\n        if (key.done) {\n            return { value: [key.value, null], done: key.done };\n        }\n        const valueAndIndex = this.map.get(key.value);\n        assert(valueAndIndex !== null, ERR_INCONSISTENT_STATE);\n        return {\n            done: key.done,\n            value: [key.value, getValueWithOptions(valueAndIndex[0], this.options)],\n        };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array, assert, serializeValueWithOptions, ERR_INCONSISTENT_STATE, } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nfunction serializeIndex(index) {\n    const data = new Uint32Array([index]);\n    const array = new Uint8Array(data.buffer);\n    return u8ArrayToBytes(array);\n}\nfunction deserializeIndex(rawIndex) {\n    const array = bytesToU8Array(rawIndex);\n    const [data] = new Uint32Array(array.buffer);\n    return data;\n}\n/**\n * An unordered set that stores data in NEAR storage.\n */\nexport class UnorderedSet {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(prefix) {\n        this.prefix = prefix;\n        this.elementIndexPrefix = `${prefix}i`;\n        this.elements = new Vector(`${prefix}e`);\n    }\n    /**\n     * The number of elements stored in the collection.\n     */\n    get length() {\n        return this.elements.length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.elements.isEmpty();\n    }\n    /**\n     * Checks whether the collection contains the value.\n     *\n     * @param element - The value for which to check the presence.\n     * @param options - Options for storing data.\n     */\n    contains(element, options) {\n        const indexLookup = this.elementIndexPrefix + serializeValueWithOptions(element, options);\n        return near.storageHasKey(indexLookup);\n    }\n    /**\n     * If the set did not have this value present, `true` is returned.\n     * If the set did have this value present, `false` is returned.\n     *\n     * @param element - The value to store in the collection.\n     * @param options - Options for storing the data.\n     */\n    set(element, options) {\n        const indexLookup = this.elementIndexPrefix + serializeValueWithOptions(element, options);\n        if (near.storageRead(indexLookup)) {\n            return false;\n        }\n        const nextIndex = this.length;\n        const nextIndexRaw = serializeIndex(nextIndex);\n        near.storageWrite(indexLookup, nextIndexRaw);\n        this.elements.push(element, options);\n        return true;\n    }\n    /**\n     * Returns true if the element was present in the set.\n     *\n     * @param element - The entry to remove.\n     * @param options - Options for retrieving and storing data.\n     */\n    remove(element, options) {\n        const indexLookup = this.elementIndexPrefix + serializeValueWithOptions(element, options);\n        const indexRaw = near.storageRead(indexLookup);\n        if (!indexRaw) {\n            return false;\n        }\n        // If there is only one element then swap remove simply removes it without\n        // swapping with the last element.\n        if (this.length === 1) {\n            near.storageRemove(indexLookup);\n            const index = deserializeIndex(indexRaw);\n            this.elements.swapRemove(index);\n            return true;\n        }\n        // If there is more than one element then swap remove swaps it with the last\n        // element.\n        const lastElement = this.elements.get(this.length - 1, options);\n        assert(!!lastElement, ERR_INCONSISTENT_STATE);\n        near.storageRemove(indexLookup);\n        // If the removed element was the last element from keys, then we don't need to\n        // reinsert the lookup back.\n        if (lastElement !== element) {\n            const lastLookupElement = this.elementIndexPrefix +\n                serializeValueWithOptions(lastElement, options);\n            near.storageWrite(lastLookupElement, indexRaw);\n        }\n        const index = deserializeIndex(indexRaw);\n        this.elements.swapRemove(index);\n        return true;\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear(options) {\n        for (const element of this.elements) {\n            const indexLookup = this.elementIndexPrefix + serializeValueWithOptions(element, options);\n            near.storageRemove(indexLookup);\n        }\n        this.elements.clear();\n    }\n    [Symbol.iterator]() {\n        return this.elements[Symbol.iterator]();\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new VectorIterator(this.elements, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Extends the current collection with the passed in array of elements.\n     *\n     * @param elements - The elements to extend the collection with.\n     */\n    extend(elements) {\n        for (const element of elements) {\n            this.set(element);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const set = new UnorderedSet(data.prefix);\n        // reconstruct Vector\n        const elementsPrefix = data.prefix + \"e\";\n        set.elements = new Vector(elementsPrefix);\n        set.elements.length = data.elements.length;\n        return set;\n    }\n}\n","import {\n  NearBindgen,\n  near,\n  call,\n  view,\n  LookupMap,\n  UnorderedSet,\n  UnorderedMap,\n} from \"near-sdk-js\";\n\n@NearBindgen({})\nclass HelloNear {\n  greeting: string = \"Hello\";\n\n  candidateUrl = new UnorderedMap<string>(\"candidateUrl\");\n  candidatePair = new UnorderedMap<string[]>(\"candidate_pair\");\n  promptSet = new UnorderedSet<string>(\"promptArray\");\n  voteArray = new UnorderedMap<number[]>(\"voteArray\");\n  userParticipation = new UnorderedMap<string[]>(\"user Participation \");\n\n  // Writing View Methods\n\n  @view({})\n  getUrl({ name }: { name: string }): string {\n    return this.candidateUrl.get(name, {\n      defaultValue: \"no url\",\n    });\n  }\n\n  @view({})\n  didParticipate({ prompt, user }: { prompt: string; user: string }): boolean {\n    let promptUserList: string[] = this.userParticipation.get(prompt, {\n      defaultValue: [],\n    });\n\n    return promptUserList.includes(user);\n  }\n\n  @view({})\n  getAllPrompts(): string[] {\n    return this.promptSet.toArray();\n  }\n\n  @view({})\n  getVotes({ prompt }: { prompt: string }): number[] {\n    return this.voteArray.get(prompt, { defaultValue: [] });\n  }\n\n  @view({})\n  getCandidatePair({ prompt }: { prompt: string }): string[] {\n    return this.candidatePair.get(prompt, { defaultValue: [\"n/a,n/a\"] });\n  }\n\n  // change methods\n  @call({}) // This method changes the state, for which it cost gas\n  set_greeting({ message }: { message: string }): void {\n    // Record a log permanently to the blockchain!\n    near.log(`Saving greeting ${message}`);\n    this.greeting = message;\n  }\n\n  @call({})\n  addUrl({ name, url }: { name: string; url: string }) {\n    this.candidateUrl.set(name, url);\n  }\n\n  @call({})\n  linkAdd({ name, link }: { name: string; link: string }) {\n    this.candidateUrl.set(name, link);\n  }\n\n  @call({})\n  addCandidatePair({\n    prompt,\n    name1,\n    name2,\n  }: {\n    prompt: string;\n    name1: string;\n    name2: string;\n  }) {\n    this.candidatePair.set(prompt, [name1, name2]);\n  }\n\n  @call({})\n  newVote({ prompt }: { prompt: string }) {\n    this.voteArray.set(prompt, [0, 0]);\n  }\n\n  @call({})\n  addToPromptArray({ prompt }: { prompt: string }) {\n    this.promptSet.set(prompt);\n  }\n\n  @call({})\n  clearPromptArray() {\n    this.promptSet.clear();\n  }\n\n  @call({})\n  addVote({ prompt, index }: { prompt: string; index: number }) {\n    let currentVotes = this.voteArray.get(prompt, { defaultValue: [0, 0] });\n    currentVotes[index] = currentVotes[index] + 1;\n    this.voteArray.set(prompt, currentVotes);\n  }\n\n  @call({})\n  recordUser({ prompt, user }: { prompt: string; user: string }) {\n    let currentArray = this.userParticipation.get(prompt, { defaultValue: [] });\n    currentArray.includes(user) ? null : currentArray.push(user);\n    this.userParticipation.set(prompt, currentArray);\n  }\n}\n"],"names":["PromiseIndexBrand","TYPE_KEY","TypeBrand","ERR_INCONSISTENT_STATE","ERR_INDEX_OUT_OF_BOUNDS","u8ArrayToBytes","array","reduce","result","value","String","fromCharCode","bytesToU8Array","bytes","Uint8Array","from","map","byte","charCodeAt","assert","expression","message","Error","getValueWithOptions","options","deserializer","deserialize","deserialized","undefined","defaultValue","reconstructor","serializeValueWithOptions","serializer","serialize","valueToSerialize","JSON","stringify","key","toString","BIGINT","Date","toISOString","DATE","valueToDeserialize","parse","_","Object","keys","length","every","includes","BigInt","PromiseResult","PromiseError","assertNumber","n","Number","isSafeInteger","chain","args","wrap","a","b","c","encode","Array","reverse","acc","i","decode","alphabet","digits","isArray","input","letter","index","indexOf","join","separator","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","forEach","d","carry","done","digit","digitBase","Math","floor","gcd","radix2carry","convertRadix2","mask","radix","num","radix2","revPadding","unsafeWrapper","apply","e","base16","base32","s","toUpperCase","replace","base64","base64url","genBase58","abc","base58","XMR_BLOCK_LEN","base58xmr","block","subarray","padStart","str","blockLen","j","concat","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","len","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","actualLength","TypeError","toLowerCase","lowered","sepIndex","lastIndexOf","sum","endsWith","decodeUnsafe","decodeToBytes","utf8","TextDecoder","TextEncoder","hex","CODERS","CurveType","DataLength","U64_MAX","EVICTED_REGISTER","log","params","env","accumulated","parameter","param","stringified","predecessorAccountId","predecessor_account_id","read_register","currentAccountId","current_account_id","attachedDeposit","attached_deposit","storageRead","returnValue","storage_read","storageHasKey","storage_has_key","storageGetEvicted","storageWrite","storage_write","storageRemove","storage_remove","view","_empty","_target","_key","_descriptor","call","privateFunction","payableFunction","descriptor","originalMethod","near","NearBindgen","requireInit","target","_create","_getState","rawState","_deserialize","_saveToStorage","objectToSave","_serialize","_getArgs","forReturn","_reconstruct","classObject","plainObject","item","constructor","reconstruct","_requireInit","LookupMap","keyPrefix","containsKey","storageKey","get","remove","set","newValue","storageValue","extend","keyValuePairs","indexToKey","Uint32Array","buffer","Vector","isEmpty","swapRemove","pop","last","element","lastIndex","lastKey","elements","Symbol","iterator","VectorIterator","createIteratorWithOptions","toArray","clear","vector","current","next","UnorderedMap","values","valueAndIndex","serialized","newElementIndex","oldValue","oldIndex","oldValueAndIndex","swappedKey","swappedValueAndIndex","UnorderedMapIterator","unorderedMap","serializeIndex","deserializeIndex","rawIndex","UnorderedSet","elementIndexPrefix","contains","indexLookup","nextIndex","nextIndexRaw","indexRaw","lastElement","lastLookupElement","elementsPrefix","HelloNear","greeting","candidateUrl","candidatePair","promptSet","voteArray","userParticipation","getUrl","name","didParticipate","prompt","user","promptUserList","getAllPrompts","getVotes","getCandidatePair","set_greeting","addUrl","url","linkAdd","link","addCandidatePair","name1","name2","newVote","addToPromptArray","clearPromptArray","addVote","currentVotes","recordUser","currentArray"],"mappings":"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"}